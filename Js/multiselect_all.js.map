{"version":3,"sources":["multiselect_all.es6"],"names":[],"mappings":"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","file":"multiselect_all.js","sourcesContent":["/**\r\n * Created by user on 2016/8/4.\r\n */\r\nconst pointerMixin = {\r\n    data () {\r\n        return {\r\n            pointer: 0,\r\n            visibleElements: this.maxHeight / 40\r\n        }\r\n    },\r\n    props: {\r\n        /**\r\n         * Enable/disable highlighting of the pointed value.\r\n         * @type {Boolean}\r\n         * @default true\r\n         */\r\n        showPointer: {\r\n            type: Boolean,\r\n            default: true\r\n        }\r\n    },\r\n    computed: {\r\n        pointerPosition () {\r\n            return this.pointer * 40\r\n        }\r\n    },\r\n    watch: {\r\n        'filteredOptions' () {\r\n            this.pointerAdjust()\r\n        }\r\n    },\r\n    methods: {\r\n        addPointerElement () {\r\n            if (this.filteredOptions.length > 0) {\r\n                this.select(this.filteredOptions[this.pointer])\r\n            }\r\n            this.pointerReset()\r\n        },\r\n        pointerForward () {\r\n            if (this.pointer < this.filteredOptions.length - 1) {\r\n                this.pointer++\r\n                if (this.$els.list.scrollTop <= this.pointerPosition - this.visibleElements * 40) {\r\n                    this.$els.list.scrollTop = this.pointerPosition - (this.visibleElements - 1) * 40\r\n                }\r\n            }\r\n        },\r\n        pointerBackward () {\r\n            if (this.pointer > 0) {\r\n                this.pointer--\r\n                if (this.$els.list.scrollTop >= this.pointerPosition) {\r\n                    this.$els.list.scrollTop = this.pointerPosition\r\n                }\r\n            }\r\n        },\r\n        pointerReset () {\r\n            if (!this.closeOnSelect) return\r\n\r\n            this.pointer = 0\r\n            if (this.$els.list) {\r\n                this.$els.list.scrollTop = 0\r\n            }\r\n        },\r\n        pointerAdjust () {\r\n            if (this.pointer >= this.filteredOptions.length - 1) {\r\n                this.pointer = this.filteredOptions.length\r\n                    ? this.filteredOptions.length - 1\r\n                    : 0\r\n            }\r\n        },\r\n        pointerSet (index) {\r\n            this.pointer = index\r\n        }\r\n    }\r\n}\r\n\r\nconst deepClone = function (obj) {\r\n    if (Array.isArray(obj)) {\r\n        return obj.map(deepClone)\r\n    } else if (obj && typeof obj === 'object') {\r\n        var cloned = {}\r\n        var keys = Object.keys(obj)\r\n        for (var i = 0, l = keys.length; i < l; i++) {\r\n            var key = keys[i]\r\n            cloned[key] = deepClone(obj[key])\r\n        }\r\n        return cloned\r\n    } else {\r\n        return obj\r\n    }\r\n}\r\n\r\nconst multiselectMixin = {\r\n    data () {\r\n        return {\r\n            search: '',\r\n            isOpen: false,\r\n            value: this.selected ? deepClone(this.selected) : this.multiple ? [] : null\r\n        }\r\n    },\r\n    props: {\r\n        /**\r\n         * Array of available options: Objects, Strings or Integers.\r\n         * If array of objects, visible label will default to option.label.\r\n         * If `labal` prop is passed, label will equal option['label']\r\n         * @type {Array}\r\n         */\r\n        options: {\r\n            type: Array,\r\n            required: true\r\n        },\r\n        /**\r\n         * Equivalent to the `multiple` attribute on a `<select>` input.\r\n         * @default false\r\n         * @type {Boolean}\r\n         */\r\n        multiple: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Presets the selected options value.\r\n         * @type {Object||Array||String||Integer}\r\n         */\r\n        selected: {},\r\n        /**\r\n         * Key to compare objects\r\n         * @default 'id'\r\n         * @type {String}\r\n         */\r\n        key: {\r\n            type: String,\r\n            default: false\r\n        },\r\n        /**\r\n         * Label to look for in option Object\r\n         * @default 'label'\r\n         * @type {String}\r\n         */\r\n        label: {\r\n            type: String,\r\n            default: false\r\n        },\r\n        /**\r\n         * Enable/disable search in options\r\n         * @default true\r\n         * @type {Boolean}\r\n         */\r\n        searchable: {\r\n            type: Boolean,\r\n            default: true\r\n        },\r\n        /**\r\n         * Clear the search input after select()\r\n         * @default true\r\n         * @type {Boolean}\r\n         */\r\n        clearOnSelect: {\r\n            type: Boolean,\r\n            default: true\r\n        },\r\n        /**\r\n         * Hide already selected options\r\n         * @default false\r\n         * @type {Boolean}\r\n         */\r\n        hideSelected: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Equivalent to the `placeholder` attribute on a `<select>` input.\r\n         * @default 'Select option'\r\n         * @type {String}\r\n         */\r\n        placeholder: {\r\n            type: String,\r\n            default: 'Select option'\r\n        },\r\n        /**\r\n         * Sets maxHeight style value of the dropdown\r\n         * @default 300\r\n         * @type {Integer}\r\n         */\r\n        maxHeight: {\r\n            type: Number,\r\n            default: 300\r\n        },\r\n        /**\r\n         * Allow to remove all selected values\r\n         * @default true\r\n         * @type {Boolean}\r\n         */\r\n        allowEmpty: {\r\n            type: Boolean,\r\n            default: true\r\n        },\r\n        /**\r\n         * Reset this.value, this.search, this.selected after this.value changes.\r\n         * Useful if want to create a stateless dropdown, that fires the this.onChange\r\n         * callback function with different params.\r\n         * @default false\r\n         * @type {Boolean}\r\n         */\r\n        resetAfter: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Enable/disable closing after selecting an option\r\n         * @default true\r\n         * @type {Boolean}\r\n         */\r\n        closeOnSelect: {\r\n            type: Boolean,\r\n            default: true\r\n        },\r\n        /**\r\n         * Function to interpolate the custom label\r\n         * @default false\r\n         * @type {Function}\r\n         */\r\n        customLabel: {\r\n            type: Function,\r\n            default: false\r\n        },\r\n        /**\r\n         * Disable / Enable tagging\r\n         * @default false\r\n         * @type {Boolean}\r\n         */\r\n        taggable: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * String to show when highlighting a potential tag\r\n         * @default 'Press enter to create a tag'\r\n         * @type {String}\r\n         */\r\n        tagPlaceholder: {\r\n            type: String,\r\n            default: 'Press enter to create a tag'\r\n        },\r\n        /**\r\n         * Number of allowed selected options. No limit if false.\r\n         * @default False\r\n         * @type {Number}\r\n         */\r\n        max: {\r\n            type: Number,\r\n            default: false\r\n        },\r\n        /**\r\n         * Will be passed with all events as second param.\r\n         * Useful for identifying events origin.\r\n         * @default null\r\n         * @type {String|Integer}\r\n         */\r\n        id: {\r\n            default: null\r\n        }\r\n    },\r\n    created () {\r\n        if (this.searchable) this.adjustSearch()\r\n    },\r\n    computed: {\r\n        filteredOptions () {\r\n            let search = this.search || ''\r\n            let options = this.hideSelected\r\n                ? this.options.filter(this.isNotSelected)\r\n                : this.options\r\n            options = this.$options.filters.filterBy(options, this.search)\r\n            if (this.taggable && search.length && !this.isExistingOption(search)) {\r\n                options.unshift({ isTag: true, label: search })\r\n            }\r\n            return options\r\n        },\r\n        valueKeys () {\r\n            if (this.key) {\r\n                return this.multiple\r\n                    ? this.value.map(element => element[this.key])\r\n                    : this.value[this.key]\r\n            } else {\r\n                return this.value\r\n            }\r\n        },\r\n        optionKeys () {\r\n            return this.label\r\n                ? this.options.map(element => element[this.label])\r\n                : this.options\r\n        },\r\n        currentOptionLabel () {\r\n            return this.getOptionLabel(this.value)\r\n        }\r\n    },\r\n    watch: {\r\n        'value' () {\r\n            if (this.resetAfter) {\r\n                this.$set('value', null)\r\n                this.$set('search', null)\r\n                this.$set('selected', null)\r\n            }\r\n            this.adjustSearch()\r\n        },\r\n        'search' () {\r\n            /* istanbul ignore else */\r\n            if (this.search !== this.currentOptionLabel) {\r\n                this.$emit('search-change', this.search, this.id)\r\n            }\r\n        },\r\n        'selected' (newVal, oldVal) {\r\n            this.value = deepClone(this.selected)\r\n        }\r\n    },\r\n    methods: {\r\n        /**\r\n         * Finds out if the given query is already present\r\n         * in the available options\r\n         * @param  {String}\r\n         * @returns {Boolean} returns true if element is available\r\n         */\r\n        isExistingOption (query) {\r\n            return !this.options\r\n                ? false\r\n                : this.optionKeys.indexOf(query) > -1\r\n        },\r\n        /**\r\n         * Finds out if the given element is already present\r\n         * in the result value\r\n         * @param  {Object||String||Integer} option passed element to check\r\n         * @returns {Boolean} returns true if element is selected\r\n         */\r\n        isSelected (option) {\r\n            /* istanbul ignore else */\r\n            if (!this.value) return false\r\n            const opt = this.key\r\n                ? option[this.key]\r\n                : option\r\n\r\n            if (this.multiple) {\r\n                return this.valueKeys.indexOf(opt) > -1\r\n            } else {\r\n                return this.valueKeys === opt\r\n            }\r\n        },\r\n        /**\r\n         * Finds out if the given element is NOT already present\r\n         * in the result value. Negated isSelected method.\r\n         * @param  {Object||String||Integer} option passed element to check\r\n         * @returns {Boolean} returns true if element is not selected\r\n         */\r\n        isNotSelected (option) {\r\n            return !this.isSelected(option)\r\n        },\r\n        /**\r\n         * Returns the option[this.label]\r\n         * if option is Object. Otherwise check for option.label.\r\n         * If non is found, return entrie option.\r\n         *\r\n         * @param  {Object||String||Integer} Passed option\r\n         * @returns {Object||String}\r\n         */\r\n        getOptionLabel (option) {\r\n            if (typeof option === 'object' && option !== null) {\r\n                if (this.customLabel) {\r\n                    return this.customLabel(option)\r\n                } else {\r\n                    if (this.label && option[this.label]) {\r\n                        return option[this.label]\r\n                    } else if (option.label) {\r\n                        return option.label\r\n                    }\r\n                }\r\n            } else {\r\n                return option\r\n            }\r\n        },\r\n        /**\r\n         * Add the given option to the list of selected options\r\n         * or sets the option as the selected option.\r\n         * If option is already selected -> remove it from the results.\r\n         *\r\n         * @param  {Object||String||Integer} option to select/deselect\r\n         */\r\n        select (option) {\r\n            if (this.max && this.multiple && this.value.length === this.max) return\r\n            if (option.isTag) {\r\n                this.$emit('tag', option.label, this.id)\r\n                this.search = ''\r\n            } else {\r\n                if (this.multiple) {\r\n                    if (!this.isNotSelected(option)) {\r\n                        this.removeElement(option)\r\n                    } else {\r\n                        this.value.push(option)\r\n\r\n                        this.$emit('select', deepClone(option), this.id)\r\n                        this.$emit('update', deepClone(this.value), this.id)\r\n                    }\r\n                } else {\r\n                    const isSelected = this.isSelected(option)\r\n\r\n                    /* istanbul ignore else */\r\n                    if (isSelected && !this.allowEmpty) return\r\n\r\n                    this.value = isSelected ? null : option\r\n\r\n                    this.$emit('select', deepClone(option), this.id)\r\n                    this.$emit('update', deepClone(this.value), this.id)\r\n                }\r\n\r\n                if (this.closeOnSelect) this.deactivate()\r\n            }\r\n        },\r\n        /**\r\n         * Removes the given option from the selected options.\r\n         * Additionally checks this.allowEmpty prop if option can be removed when\r\n         * it is the last selected option.\r\n         *\r\n         * @param  {type} option description\r\n         * @returns {type}        description\r\n         */\r\n        removeElement (option) {\r\n            /* istanbul ignore else */\r\n            if (!this.allowEmpty && this.value.length <= 1) return\r\n\r\n            if (this.multiple && typeof option === 'object') {\r\n                const index = this.valueKeys.indexOf(option[this.key])\r\n                this.value.splice(index, 1)\r\n            } else {\r\n                this.value.$remove(option)\r\n            }\r\n            this.$emit('remove', deepClone(option), this.id)\r\n            this.$emit('update', deepClone(this.value), this.id)\r\n        },\r\n        /**\r\n         * Calls this.removeElement() with the last element\r\n         * from this.value (selected element Array)\r\n         *\r\n         * @fires this#removeElement\r\n         */\r\n        removeLastElement () {\r\n            /* istanbul ignore else */\r\n            if (this.search.length === 0 && Array.isArray(this.value)) {\r\n                this.removeElement(this.value[this.value.length - 1])\r\n            }\r\n        },\r\n        /**\r\n         * Opens the multiselect’s dropdown.\r\n         * Sets this.isOpen to TRUE\r\n         */\r\n        activate () {\r\n            /* istanbul ignore else */\r\n            if (this.isOpen) return\r\n\r\n            this.isOpen = true\r\n            /* istanbul ignore else  */\r\n            if (this.searchable) {\r\n                this.search = ''\r\n                this.$els.search.focus()\r\n            } else {\r\n                this.$el.focus()\r\n            }\r\n            this.$emit('open', this.id)\r\n        },\r\n        /**\r\n         * Closes the multiselect’s dropdown.\r\n         * Sets this.isOpen to FALSE\r\n         */\r\n        deactivate () {\r\n            /* istanbul ignore else */\r\n            if (!this.isOpen) return\r\n\r\n            this.isOpen = false\r\n            /* istanbul ignore else  */\r\n            if (this.searchable) {\r\n                this.$els.search.blur()\r\n                this.adjustSearch()\r\n            } else {\r\n                this.$el.blur()\r\n            }\r\n            this.$emit('close', deepClone(this.value), this.id)\r\n        },\r\n        /**\r\n         * Adjusts the Search property to equal the correct value\r\n         * depending on the selected value.\r\n         */\r\n        adjustSearch () {\r\n            if (!this.searchable || !this.clearOnSelect) return\r\n\r\n            this.search = this.multiple\r\n                ? ''\r\n                : this.currentOptionLabel\r\n        },\r\n        /**\r\n         * Call this.activate() or this.deactivate()\r\n         * depending on this.isOpen value.\r\n         *\r\n         * @fires this#activate || this#deactivate\r\n         * @property {Boolean} isOpen indicates if dropdown is open\r\n         */\r\n        toggle () {\r\n            this.isOpen\r\n                ? this.deactivate()\r\n                : this.activate()\r\n        }\r\n    }\r\n}\r\n\r\nVue.component('multiselect', {\r\n    mixins: [multiselectMixin, pointerMixin],\r\n    template: `<div tabindex=\"0\" :class=\"{ 'multiselect--active': isOpen, 'multiselect--disabled': disabled }\" @focus=\"activate()\" @blur=\"searchable ? false : deactivate()\" @keydown.self.down.prevent=\"pointerForward()\"\r\n            @keydown.self.up.prevent=\"pointerBackward()\" @keydown.enter.stop.prevent.self=\"addPointerElement()\" @keyup.esc=\"deactivate()\" class=\"multiselect\">\r\n        <div @mousedown.prevent=\"toggle()\" class=\"multiselect__select\"></div>\r\n        <div v-el:tags class=\"multiselect__tags\">\r\n        <span v-if=\"multiple\" v-for=\"option in visibleValue\" track-by=\"$index\" onmousedown=\"event.preventDefault()\" class=\"multiselect__tag\">\r\n            <span v-text=\"getOptionLabel(option)\"></span>\r\n            <i aria-hidden=\"true\" tabindex=\"1\" @keydown.enter.prevent=\"removeElement(option)\" @mousedown.prevent=\"removeElement(option)\" class=\"multiselect__tag-icon\"></i>\r\n        </span>\r\n            <template v-if=\"value && value.length > limit\">\r\n                <strong v-text=\"limitText(value.length - limit)\"></strong>\r\n            </template>\r\n            <div v-show=\"loading\" transition=\"multiselect__loading\" class=\"multiselect__spinner\"></div>\r\n            <input name=\"search\" type=\"text\" autocomplete=\"off\" :placeholder=\"placeholder\" v-el:search v-if=\"searchable\"\r\n                    v-model=\"search\"\r\n                    :disabled=\"disabled\"\r\n                    @focus.prevent=\"activate()\"\r\n                    @blur.prevent=\"deactivate()\"\r\n                    @keyup.esc=\"deactivate()\"\r\n                    @keyup.down=\"pointerForward()\"\r\n                    @keyup.up=\"pointerBackward()\"\r\n                    @keydown.enter.stop.prevent.self=\"addPointerElement()\"\r\n                    @keydown.delete=\"removeLastElement()\"\r\n                    class=\"multiselect__input\"/>\r\n          <span\r\n                  v-if=\"!searchable && !multiple\"\r\n                  class=\"multiselect__single\"\r\n                  v-text=\"currentOptionLabel || placeholder\">\r\n          </span>\r\n        </div>\r\n        <ul\r\n                transition=\"multiselect\"\r\n                :style=\"{ maxHeight: maxHeight + 'px' }\"\r\n                v-el:list\r\n                v-show=\"isOpen\"\r\n                class=\"multiselect__content\">\r\n            <slot name=\"beforeList\"></slot>\r\n            <li v-if=\"multiple && max === value.length\">\r\n          <span class=\"multiselect__option\">\r\n            <slot name=\"maxElements\">Maximum of {{ max }} options selected. First remove a selected option to select another.</slot>\r\n          </span>\r\n            </li>\r\n            <template v-if=\"!max || value.length < max\">\r\n                <li v-for=\"option in filteredOptions\" track-by=\"$index\">\r\n            <span\r\n                    tabindex=\"0\"\r\n                    :class=\"{ 'multiselect__option--highlight': $index === pointer && this.showPointer, 'multiselect__option--selected': !isNotSelected(option) }\"\r\n                    @mousedown.prevent=\"select(option)\"\r\n                    @mouseenter=\"pointerSet($index)\"\r\n                    :data-select=\"option.isTag ? tagPlaceholder : selectLabel\"\r\n                    :data-selected=\"selectedLabel\"\r\n                    :data-deselect=\"deselectLabel\"\r\n                    class=\"multiselect__option\"\r\n                    v-text=\"getOptionLabel(option)\">\r\n            </span>\r\n                </li>\r\n            </template>\r\n            <li v-show=\"filteredOptions.length === 0 && search\">\r\n          <span class=\"multiselect__option\">\r\n            <slot name=\"noResult\">No elements found. Consider changing the search query.</slot>\r\n          </span>\r\n            </li>\r\n            <slot name=\"afterList\"></slot>\r\n        </ul>\r\n    </div>`,\r\n    props: {\r\n        /**\r\n         * String to show when pointing to an option\r\n         * @default 'Press enter to select'\r\n         * @type {String}\r\n         */\r\n        selectLabel: {\r\n            type: String,\r\n            default: 'Press enter to select'\r\n        },\r\n        /**\r\n         * String to show next to selected option\r\n         * @default 'Selected'\r\n         * @type {String}\r\n         */\r\n        selectedLabel: {\r\n            type: String,\r\n            default: 'Selected'\r\n        },\r\n        /**\r\n         * String to show when pointing to an alredy selected option\r\n         * @default 'Press enter to remove'\r\n         * @type {String}\r\n         */\r\n        deselectLabel: {\r\n            type: String,\r\n            default: 'Press enter to remove'\r\n        },\r\n        /**\r\n         * Decide whether to show pointer labels\r\n         * @default true\r\n         * @type {Boolean}\r\n         */\r\n        showLabels: {\r\n            type: Boolean,\r\n            default: true\r\n        },\r\n        /**\r\n         * Limit the display of selected options. The rest will be hidden within the limitText string.\r\n         * @default 'label'\r\n         * @type {String}\r\n         */\r\n        limit: {\r\n            type: Number,\r\n            default: 99999\r\n        },\r\n        /**\r\n         * Function that process the message shown when selected\r\n         * elements pass the defined limit.\r\n         * @default 'and * more'\r\n         * @param {Int} count Number of elements more than limit\r\n         * @type {Function}\r\n         */\r\n        limitText: {\r\n            type: Function,\r\n            default: count => `and ${count} more`\r\n        },\r\n        /**\r\n         * Set true to trigger the loading spinner.\r\n         * @default False\r\n         * @type {Boolean}\r\n         */\r\n        loading: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        /**\r\n         * Disables the multiselect if true.\r\n         * @default false\r\n         * @type {Boolean}\r\n         */\r\n        disabled: {\r\n            type: Boolean,\r\n            default: false\r\n        }\r\n    },\r\n    computed: {\r\n        visibleValue () {\r\n            return this.multiple\r\n                ? this.value.slice(0, this.limit)\r\n                : this.value\r\n        }\r\n    },\r\n    ready () {\r\n        /* istanbul ignore else */\r\n        if (!this.showLabels) {\r\n            this.deselectLabel = this.selectedLabel = this.selectLabel = ''\r\n        }\r\n    }\r\n\r\n})"]}